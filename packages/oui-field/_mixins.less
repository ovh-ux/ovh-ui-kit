@import '../oui-checkbox/_mixins';
@import '../oui-input/_mixins';
@import '../oui-responsive/responsive';
@import '../oui-select/_mixins';
@import '../oui-switch/_mixins';
@import '../oui-textarea/_mixins';
@import '../oui-ui-select/_mixins';
@import './_variables';

#oui {
  .field-base(
    @selector,
    @button-selector,
    @label-selector,
    @input-group-selector,
    @checkbox-selector,
    @select-selector,
    @ui-select-selector,
    @switch-selector,
    @textarea-selector,
    @custom-component-selector,
    @icon-error-selector: @oui-field-error-icon-selector,
    @form-controls: @oui-global-base-form-controls
  ) {
    display: flex;
    flex-direction: column;
    margin-bottom: @oui-field-spacing;

    .@{label-selector} {
      font-size: @oui-field-label-font-size;

      &_focus {
        color: @oui-field-label-default-font-color;
      }
    }

    &__label-container {
      .@{label-selector} {
        display: inline-block;
      }
    }

    /**
     * &__content is kept only for backward compatibility.
     */
    &__content {
      display: flex;
      align-items: center;

      /* stylelint-disable indentation */
      .tablet({
        display: block;
      });
      /* stylelint-enable */
    }

    &-control {
      margin-bottom: @oui-field-content-spacing;
    }

    &-helper {
      margin: 0 0 @oui-field-content-spacing @oui-field-content-spacing;
    }

    /**
     * &-control is kept only for backward compatibility.
     */
    &-control, &__control {
      width: @oui-field-control-default-size;
      margin-bottom: @oui-field-control-spacing;
      .field-sizes();

      // Native form controls
      .controls(@index: length(@form-controls)) when(@index > 0) {
        .controls(@index - 1);
        @control: extract(@form-controls, @index);

        > @{control} {
          margin-bottom: 0;
        }
      }
      .controls();

      // Specific cases
      > oui-numeric > .@{input-group-selector},
      > oui-select > .@{ui-select-selector},
      > oui-switch > .@{switch-selector}__label-container {
        margin-bottom: 0;
      }
    }

    /**
     * &-helper is kept only for backward compatibility.
     */
    &-helper, &__helper {
      color: @oui-field-helper-color;
      font-size: @oui-field-helper-font-size;
      text-align: justify;

      &_top {
        align-self: flex-start;
      }

      /* stylelint-disable indentation */
      .tablet({
        margin-left: 0;
      });
      /* stylelint-enable */
    }

    /**
     * Error message container.
     * &_error is kept only for backward compatibility.
     */
    &__error {
      display: none;
      color: @oui-field-error-color;
      font-size: @oui-field-error-font-size;
      text-align: justify;

      .@{oui-field-error-icon-selector} {
        color: @oui-field-error-icon-color;
        font-size: @oui-field-error-icon-font-size;
        vertical-align: sub;
      }
    }

    &_error {
      .@{selector}__error {
        display: block;
      }

      .oui-input {
        #oui > .input-error-style();
      }

      .@{checkbox-selector},
      .@{checkbox-selector}:hover {
        #oui > .checkbox-error-style();
      }

      .@{select-selector} {
        #oui > .select-error-style();
      }

      // Custom components specificities
      .@{ui-select-selector} {
        #oui > .ui-select-container-error-style();
      }

      .@{switch-selector} {
        #oui > .switch-error-style();
      }

      .@{textarea-selector} {
        background-color: pink;
        #oui > .textarea-error-style(@textarea-selector);
      }
    }
  }

  .field-sizes() {
    .make-control-sizes(@i: 1) when (@i <= length(@oui-field-control-sizes)) {
      .make-control-sizes(@i + 1);
      @pair: extract(@oui-field-control-sizes, @i);
      @key: extract(@pair, 1);
      @value: extract(@pair, 2);
      &_@{key}, &_@{i} {
        width: @value;
        min-width: @value;
      }
    }
    .make-control-sizes();

    /* stylelint-disable indentation */
    .phone({
      .make-control-phone-sizes(@i: 1) when (@i <= length(@oui-field-control-phone-sizes)) {
        .make-control-phone-sizes(@i + 1);
        @pair: extract(@oui-field-control-phone-sizes, @i);
        @key: extract(@pair, 1);
        @value: extract(@pair, 2);
        &_@{key}, &_@{i} {
          width: auto;
          min-width: 0;
          max-width: @value;
        }
      }
      .make-control-phone-sizes();
    });
    /* stylelint-enable */
  }
}
